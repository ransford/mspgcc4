diff -urN msp430-libc-ti_20101114.old/include/iomacros.h msp430-libc-ti_20101114/include/iomacros.h
--- msp430-libc-ti_20101114.old/include/iomacros.h	2010-11-14 11:40:14.000000000 -0500
+++ msp430-libc-ti_20101114/include/iomacros.h	2010-12-15 13:30:38.000000000 -0500
@@ -52,6 +52,12 @@
 #endif
 #endif
 
+#ifdef __cplusplus
+#define __MSP430_EXTERN__ extern "C"
+#else
+#define __MSP430_EXTERN__ extern
+#endif // __cplusplus
+
 #define Critical __attribute__ ((critical))
 #define CRITICAL __attribute__ ((critical))
 #define critical __attribute__ ((critical))
@@ -116,7 +122,23 @@
 #define __bis_SR_register(x)    __asm__ __volatile__("bis	%0, r2" : : "ir" ((uint16_t) x))
 #define __bic_SR_register(x)    __asm__ __volatile__("bic	%0, r2" : : "ir" ((uint16_t) x))
 
-#if __GNUC__ >= 4
+#ifdef __clang__
+
+/* clang has proper __builtin_frameaddress support */
+#define _BIS_SR_IRQ(x)                                  \
+  do {                                                  \
+    int *__fa = __builtin_frame_address(0);             \
+    __fa[1] |= (x);                                     \
+  } while(0)
+#define _BIC_SR_IRQ(x)                                  \
+  do {                                                  \
+    int *__fa = __builtin_frame_address(0);             \
+    __fa[1] &= ~(x);                                    \
+  } while(0)
+#define __bis_SR_register_on_exit(x)    _BIS_SR_IRQ(x)
+#define __bic_SR_register_on_exit(x)    _BIC_SR_IRQ(x)
+
+#elif __GNUC__ >= 4
 
 extern void __bis_sr_irq(int);
 extern void __bic_sr_irq(int);
@@ -188,14 +210,14 @@
 
 #endif
 
-#define sfrb_(x,x_) volatile unsigned char x asm(#x_)
+#define sfrb_(x,x_) __MSP430_EXTERN__ volatile unsigned char x asm(#x_)
 #define sfrb(x,x_) sfrb_(x,x_)
 
-#define sfrw_(x,x_) volatile unsigned int x asm(#x_)
+#define sfrw_(x,x_) __MSP430_EXTERN__ volatile unsigned int x asm(#x_)
 #define sfrw(x,x_) sfrw_(x,x_)
 
 #if 1 || defined(__MSP430X__) || defined(__MSP430X2__)
-#define sfra_(x,x_) volatile unsigned long int x asm(#x_)
+#define sfra_(x,x_) __MSP430_EXTERN__ volatile unsigned long int x asm(#x_)
 #define sfra(x,x_) sfra_(x,x_)
 #endif
 
diff -urN msp430-libc-ti_20101114.old/include/legacy/msp430x21x2.h msp430-libc-ti_20101114/include/legacy/msp430x21x2.h
--- msp430-libc-ti_20101114.old/include/legacy/msp430x21x2.h	2010-11-14 11:40:14.000000000 -0500
+++ msp430-libc-ti_20101114/include/legacy/msp430x21x2.h	2010-12-15 13:30:38.000000000 -0500
@@ -21,7 +21,7 @@
 #define __MSP430_HAS_PORT1_R__
 #define __MSP430_HAS_PORT2_R__
 #define __MSP430_HAS_PORT3_R__
-#define __MSP430_HAS_USCI_AB0__
+#define __MSP430_HAS_USCI0__
 #define __MSP430_HAS_TA3__
 #define __MSP430_HAS_T1A2__
 #define __MSP430_HAS_BC2__
diff -urN msp430-libc-ti_20101114.old/include/signal.h msp430-libc-ti_20101114/include/signal.h
--- msp430-libc-ti_20101114.old/include/signal.h	2010-11-14 11:40:14.000000000 -0500
+++ msp430-libc-ti_20101114/include/signal.h	2010-12-15 13:30:38.000000000 -0500
@@ -45,9 +45,11 @@
 
 #if !defined(__ASSEMBLER__)
 
+#ifndef __clang__
 #define Interrupt(x) void __attribute__((interrupt (x)))
 #define INTERRUPT(x) void __attribute__((interrupt (x)))
 #define interrupt(x) void __attribute__((interrupt (x)))
+#endif // __clang__
 
 #define wakeup  __attribute__((wakeup))
 #define Wakeup  __attribute__((wakeup))
diff -urN msp430-libc-ti_20101114.old/src/Makefile msp430-libc-ti_20101114/src/Makefile
--- msp430-libc-ti_20101114.old/src/Makefile	2010-11-14 11:40:14.000000000 -0500
+++ msp430-libc-ti_20101114/src/Makefile	2010-12-15 13:33:16.000000000 -0500
@@ -163,7 +163,8 @@
 __do_clear_bss.S __do_copy_data.S __do_global_ctors.S \
 __do_global_dtors.S __init_stack.S __jump_to_main.S \
 __stop_progexec__.S _reset_vector__.S \
-_unexpected_.S __bswap_32.S __bswap_64.S
+_unexpected_.S __bswap_32.S __bswap_64.S \
+__mulhi3hw_noint.S
 
 libc_str_sources = \
 isascii.c memccpy.c strchr.c strncat.c swab.c \
@@ -175,7 +176,7 @@
 index.c isspace.c rindex.c strlcpy.c strspn.c \
 isalnum.c isupper.c strcasecmp.c strlen.c strstr.c \
 isalpha.c isxdigit.c strcat.c strncasecmp.c strtok.c \
-ispunct.c
+ispunct.c udivsi3.c udivhi3.c
 
 LIBC_OBJS = $(addprefix $(BUILDDIR)/,$(libc_str_sources:.c=.o) $(libc_c_sources:.c=.o) $(libc_asm_sources:.S=.o) )
 build-libc: create_libdir $(LIBC)
diff -urN msp430-libc-ti_20101114.old/src/stdlib/__mulhi3hw_noint.S msp430-libc-ti_20101114/src/stdlib/__mulhi3hw_noint.S
--- msp430-libc-ti_20101114.old/src/stdlib/__mulhi3hw_noint.S	1969-12-31 19:00:00.000000000 -0500
+++ msp430-libc-ti_20101114/src/stdlib/__mulhi3hw_noint.S	2010-12-15 13:30:38.000000000 -0500
@@ -0,0 +1,8 @@
+	.section .text
+	.global __mulhi3hw_noint
+
+__mulhi3hw_noint:
+        mov.w   r15, &0x132
+        mov.w   r14, &0x138
+        mov.w   &0x13a, r15
+        ret
diff -urN msp430-libc-ti_20101114.old/src/stdlib/udivhi3.c msp430-libc-ti_20101114/src/stdlib/udivhi3.c
--- msp430-libc-ti_20101114.old/src/stdlib/udivhi3.c	1969-12-31 19:00:00.000000000 -0500
+++ msp430-libc-ti_20101114/src/stdlib/udivhi3.c	2010-12-15 13:31:40.000000000 -0500
@@ -0,0 +1,19 @@
+unsigned int __udivhi3(unsigned int num, unsigned int denom) {
+  unsigned int a = 0, b = 0;
+  char i = 15; // 16-bit unsigned int
+
+  /* Work from leftmost to rightmost bit in numerator */
+  while(i>=0) {
+    /* appends one bit from numerator to a */
+    a = (a << 1) + ((num & (1 << i)) >> i);
+    b = b << 1;
+    //printf("After shifting a=%d and b=%d\n",a,b);
+    if (a >= denom) {
+      a -= denom;
+      b++;
+    }
+    //printf("After subtraction a=%d and b=%d\n",a,b);
+  i--;
+  }
+  return b;
+}
diff -urN msp430-libc-ti_20101114.old/src/stdlib/udivsi3.c msp430-libc-ti_20101114/src/stdlib/udivsi3.c
--- msp430-libc-ti_20101114.old/src/stdlib/udivsi3.c	1969-12-31 19:00:00.000000000 -0500
+++ msp430-libc-ti_20101114/src/stdlib/udivsi3.c	2010-12-15 13:30:38.000000000 -0500
@@ -0,0 +1,19 @@
+unsigned long __udivsi3(unsigned long num, unsigned long denom) {
+  unsigned long a = 0, b = 0;
+  char i = 31; // assume a 32-bit unsigned long
+
+  /* Work from leftmost to rightmost bit in numerator */
+  while(i>=0) {
+    /* appends one bit from numerator to a */
+    a = (a << 1) + ((num & (1 << i)) >> i);
+    b = b << 1;
+    //printf("After shifting a=%d and b=%d\n",a,b);
+    if (a >= denom) {
+      a -= denom;
+      b++;
+    }
+    //printf("After subtraction a=%d and b=%d\n",a,b);
+  i--;
+  }
+  return b;
+}
